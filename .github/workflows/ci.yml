# Name of our automated task.
name: Docker CI/CD

# Events that trigger this job.
on:
  # When something is pushed to the "main" branch or a new version tag is added.
  push:
    paths-ignore:
      - '**.md'          # Ignore all markdown files
      - './docs/**'        # Ignore all files in the 'docs' folder
      - './img/**'         # Ignore all files in the 'img' folder
    branches:
      - main
    tags:
      - 'v*.*.*' # For example, v1.2.3

  # When a pull request is made to the "main" branch or any other branch.
  pull_request:
    paths-ignore:
      - '**.md'          # Ignore all markdown files
      - './docs/**'        # Ignore all files in the 'docs' folder
      - './img/**'         # Ignore all files in the 'img' folder
      - './Makefile'       # Ignore the Makefile
    branches:
      - '*'

# The actual jobs to be executed.
jobs:
  docker:
    # This job runs on a virtual machine with the latest Ubuntu operating system.
    runs-on: ubuntu-latest
    steps:
      # Get the code from the current repository.
      - name: Check out code
        uses: actions/checkout@v4

      # Get the name of this repository without the "docker-" prefix.
      - name: Get repository name
        id: repo_name
        run: echo "image_name=$(echo ${{ github.repository }} | sed -e 's#.*/docker-##')" >> $GITHUB_ENV

      # Set up Docker for more efficient builds using "Buildx".
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # Log in to DockerHub (a website where Docker images are stored) with a secret username and password.
      - name: Log in to DockerHub
        uses: docker/login-action@v3 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Determine the name and tags for our Docker image.
      - name: Set up Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo_name.outputs.image_name }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch,value=${{ github.ref_slug }}
            type=sha,format=short

      # Build a new Docker image with our code and push it to DockerHub.
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true # Always push, regardless of the event
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
          platforms: linux/amd64,linux/arm64

      # Add a step to remove old artifacts from DockerHub if a branch is merged.
      - name: Remove old artifacts
        if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
        run: |
          docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo_name.outputs.image_name }}:${{ github.head_ref }}
          docker rmi -f ${{ secrets.DOCKERHUB_USERNAME }}/${{ steps.repo_name.outputs.image_name }}:latest
